parents
pop <- data.frame(rTM = runif(popSize),
rTS  = runif(popSize),
rTP = runif(popSize),
fitnessA = NA,
fitnessB = NA) %>%
tbl_df()
popSize <- 5
pop <- data.frame(rTM = runif(popSize),
rTS  = runif(popSize),
rTP = runif(popSize),
fitnessA = NA,
fitnessB = NA) %>%
tbl_df()
newPop <- pop %>%
# mutate(alive = (fitnessA > bestA - 0.1) &
(fitnessB < bestB + 0.1)) %>%
# filter(alive) %>%
select(- fitnessA, - fitnessB)
pop
newPop <- pop %>%
# mutate(alive = (fitnessA > bestA - 0.1) &
#        (fitnessB < bestB + 0.1)) %>%
# filter(alive) %>%
select(- fitnessA, - fitnessB)
# reproduction
child <- data.frame(rTM = NA,
rTS  = NA,
rTP = NA)
parents <- pop %>% sample_n(2)
child$rTM <- parents$rTM[1]
child$rTS <- parents$rTS[2]
child$rTP <- parents$rTP[sample(c(1,2),1)]
newPop <- newPop %>%
union(child)
newPop
newPop
newPop <- pop %>%
select(starts_with("rT")) %>%
rowwise() %>%
mutate_all(~rnorm(1,.,sd = 0.1)) %>%
mutate(fitnessA = NA,
fitnessB = NA)
# Mutation
newPop <- newPop %>%
select(starts_with("rT")) %>%
rowwise() %>%
mutate_all(~rnorm(1,.,sd = 0.1)) %>%
mutate(fitnessA = NA,
fitnessB = NA)
newPop
n(newPop)
dim(newPop)[1]
?gather
source('~/vw7.6ncnovo/cormas2020/Models/WitUses/analyses/RAnalyses.R', echo=TRUE)
source('~/vw7.6ncnovo/cormas2020/Models/WitUses/analyses/RAnalyses.R', echo=TRUE)
op[i,]
pop[i,]
fitness(pop[i,])
genes = pop[i,]
genes
por$rTM
genes$rTM
simulateWitUsesModel(genes$rTM, genes$rTS, genes$rTP,10)
sUs <- NULL
simulateWitUsesModel(genes$rTM, genes$rTS, genes$rTP, simDuration)
simDuration = 50
nbReplication = nbReplication
sUs <- NULL
sUs <- c(sUs, simulateWitUsesModel(genes$rTM, genes$rTS, genes$rTP, simDuration))
for (replicate in 1:nbReplication) {
sUs <- c(sUs, simulateWitUsesModel(genes$rTM, genes$rTS, genes$rTP, simDuration))
}
genes
fit <- fitness(genes = pop[i,])
genes = pop[i,]
fitness
fitness(pop[i,])
ind = pop[i,]
fitness(ind)
nbReplication = nbReplication
fitness <- function(genes,
nbRep = nbReplication,
simDuration = 50) {
sUs <- NULL
for (replicate in 1:nbRep) {
sUs <- c(sUs, simulateWitUsesModel(genes$rTM, genes$rTS, genes$rTP, simDuration))
}
return(c(mean(sUs) , sd(sUs)))
}
fitness(ind)
source('~/vw7.6ncnovo/cormas2020/Models/WitUses/analyses/RAnalyses.R', echo=TRUE)
source('~/vw7.6ncnovo/cormas2020/Models/WitUses/analyses/RAnalyses.R', echo=TRUE)
pop
source('~/vw7.6ncnovo/cormas2020/Models/WitUses/analyses/RAnalyses.R', echo=TRUE)
pop
# load libraries
library(dplyr)
library(tidyr)
library(ggplot2)
# set working directory
setwd("~/vw7.6ncnovo/cormas2020/Models/WitUses/analyses")
#setwd("C:/vw7.6nc/cormas2020/Models/WitUses/analyses")
#load functions to interact with cormas
source("cormas-func.R")
#Open model
r <- openModel("WitUses", parcelFile="WitUses.pcl")
# Set the basic init and step method
r <- setInit("init") # Initialization choice
r <- setStep("step:") # Scenario choice
# Defining a simple simulateModel function
# Supose that the modele is loaded and init and step method are choosen
simulateWitUsesModel <- function(rTM, rTS, rTP, duration) {
# Set attributes values
r <- setNumericAttributeValue("ressTappingFromR",
"MobileUse",
rTM)
r <- setNumericAttributeValue("ressTappingFromR",
"SettledUse",
rTS)
r <- setNumericAttributeValue("ressTappingFromR",
"PickUse",
rTP)
####### Initialize the Cormas model #######
r <- initSimu()
####### Run Simulation #######
R <- runSimu(duration)
### Get results ####
lastNbSatisfiedUsers <- getAttributesOfEntities("satisfiedUsers",
"Observer") %>%
pull("satisfiedUsers")
return(lastNbSatisfiedUsers)
}
# Defining a fitness function
nbReplication = 3
fitness <- function(genes,
nbRep = nbReplication,
simDuration = 3) {
sUs <- NULL
for (replicate in 1:nbRep) {
sUs <- c(sUs, simulateWitUsesModel(genes$rTM, genes$rTS, genes$rTP, simDuration))
}
return(c(mean(sUs) , sd(sUs)))
}
resPlan <- NULL
resPlanBig <- NULL
#Definition de pla population initiale
popSize <- 5
pop <- data.frame(rTM = runif(popSize), # (Choose randomly a nb in ]0:1[)
rTS  = runif(popSize),
rTP = runif(popSize),
fitnessA = NA,
fitnessB = NA) %>%
tbl_df()
pop
numberOfGenerations <- 20
expPlanProgress <- txtProgressBar(min = 1,
max = numberOfGenerations,
style = 3)
# exectution de l'algo génétique
allPops <- pop
allPops$generation <- 0
generation <-1
pop
for (i in 1:length(pop)) {
fit <- fitness(genes = pop[i,])
pop$fitnessA[i] <- fit[1]
pop$fitnessB[i] <- fit[2]
}
pop
# Natural selection (les solutions dominées meurent)
bestA <- max(pop$fitnessA)
bestB <- min(pop$fitnessB)
newPop <- pop %>%
mutate(alive = (fitnessA > bestA - 0.1) &
(fitnessB < bestB + 0.1)) %>%
filter(alive) %>%
select(- fitnessA, - fitnessB)
newPop
bestA <- max(pop$fitnessA)
bestB <- min(pop$fitnessB)
newPop <- pop %>%
mutate(alive = (fitnessA > bestA - 0.1) &
(fitnessB < bestB + 0.1)) %>%
filter(alive) %>%
select(- fitnessA, - fitnessB, -alive)
newPop
newPop <- newPop[1:4,]
newPop
# reproduction
child <- data.frame(rTM = NA,
rTS  = NA,
rTP = NA)
while(dim(newPop)[1] < popSize ) {
parents <- pop %>% sample_n(2)
child$rTM <- parents$rTM[1]
child$rTS <- parents$rTS[2]
child$rTP <- parents$rTP[sample(c(1,2),1)]
newPop <- newPop %>%
union(child)
}
newPop
newPop <- newPop[1:4,]
# reproduction
child <- data.frame(rTM = NA,
rTS  = NA,
rTP = NA)
while(dim(newPop)[1] < popSize ) {
parents <- newPop %>% sample_n(2)
child$rTM <- parents$rTM[1]
child$rTS <- parents$rTS[2]
child$rTP <- parents$rTP[sample(c(1,2),1)]
newPop <- newPop %>%
union(child)
}
newPop
# Mutation
newPop <- newPop %>%
select(starts_with("rT")) %>%
rowwise() %>%
mutate_all(~rnorm(1,.,sd = 0.1)) %>%
mutate(fitnessA = NA,
fitnessB = NA)
newPop
# Mutation
newPop <- newPop %>%
select(starts_with("rT")) %>%
rowwise() %>%
mutate_all(~rnorm(1,.,sd = 0.1)) %>%
mutate_all(min(0,.)) %>%
mutate(fitnessA = NA,
fitnessB = NA)
# Mutation
newPop <- newPop %>%
select(starts_with("rT")) %>%
rowwise() %>%
mutate_all(~rnorm(1,.,sd = 0.1)) %>%
mutate_all(pmin(0,.)) %>%
mutate(fitnessA = NA,
fitnessB = NA)
?rnorm
# Mutation
newPop <- newPop %>%
select(starts_with("rT")) %>%
rowwise() %>%
mutate_all(rnorm(1,.,sd = 0.1)) %>%
mutate_all(min(0,.)) %>%
mutate(fitnessA = NA,
fitnessB = NA)
# Mutation
newPop <- newPop %>%
select(starts_with("rT")) %>%
rowwise() %>%
mutate_all(~max(rnorm(1,.,sd = 0.1),0)) %>%
mutate_all(min(0,.)) %>%
mutate(fitnessA = NA,
fitnessB = NA)
# Mutation
newPop <- newPop %>%
select(starts_with("rT")) %>%
rowwise() %>%
mutate_all(max(~rnorm(1,.,sd = 0.1),0)) %>%
mutate_all(min(0,.)) %>%
mutate(fitnessA = NA,
fitnessB = NA)
?max
# Mutation
newPop <- newPop %>%
select(starts_with("rT")) %>%
rowwise() %>%
mutate_all(~rnorm(1,.,sd = 0.1)) %>%
mutate_all(pmax(0)) %>%
mutate(fitnessA = NA,
fitnessB = NA)
# Mutation
newPop <- newPop %>%
select(starts_with("rT")) %>%
rowwise() %>%
mutate_all(~rnorm(1,.,sd = 0.1)) %>%
mutate_all(pmax(.,0)) %>%
mutate(fitnessA = NA,
fitnessB = NA)
# Mutation
newPop <- newPop %>%
select(starts_with("rT")) %>%
rowwise() %>%
mutate_all(~rnorm(1,.,sd = 0.1)) %>%
mutate(rTM = max(rTM,0)) %>%
mutate(fitnessA = NA,
fitnessB = NA)
newPop
# Mutation
newPop <- newPop %>%
select(starts_with("rT")) %>%
rowwise() %>%
mutate_all(~rnorm(1,.,sd = 0.1)) %>%
mutate(rTM = max(rTM,0)) %>%
mutate(rTS = max(rTS,0)) %>%
mutate(rTP = max(rTP,0)) %>%
mutate(fitnessA = NA,
fitnessB = NA)
newPop
# Mutation
newPop <- newPop %>%
select(starts_with("rT")) %>%
rowwise() %>%
mutate_all(~rnorm(1,.,sd = 0.1)) %>%
mutate(rTM = max(rTM,0)) %>%
mutate(rTS = max(rTS,0)) %>%
mutate(rTP = max(rTP,0)) %>%
mutate(fitnessA = NA,
fitnessB = NA)
newPop
# Mutation
newPop <- newPop %>%
select(starts_with("rT")) %>%
rowwise() %>%
mutate_all(~rnorm(1,.,sd = 0.1)) %>%
mutate(rTM = max(rTM,0)) %>%
mutate(rTS = max(rTS,0)) %>%
mutate(rTP = max(rTP,0)) %>%
mutate(fitnessA = NA,
fitnessB = NA)
#Update Population
pop$generation <- generation
allPops <- allPops %>%
union(pop)
allPops
pop
# exectution de l'algo génétique
allPops <- NULL
# Mutation
newPop <- newPop %>%
select(starts_with("rT")) %>%
rowwise() %>%
mutate_all(~rnorm(1,.,sd = 0.1)) %>%
mutate(rTM = max(rTM,0)) %>%
mutate(rTS = max(rTS,0)) %>%
mutate(rTP = max(rTP,0)) %>%
mutate(fitnessA = NA,
fitnessB = NA)
#Update Population
pop$generation <- generation
if (is.null(allPops)) {
allPops <- pop
} else {
allPops <- allPops %>%
union(pop)
}
allPops
pop <- newPop
pop
#Plot Advances
allPops %>%
gather("indicator", "value", -generation) %>%
mutate(generation = as.factor(generation)) %>%
ggplot() +
geom_boxplot(aes(x = generation,
y = value,
color = indicator))
#Plot Advances
allPops %>%
select(generation, fitnessA, fitnessB)
#Plot Advances
allPops %>%
select(generation, fitnessA, fitnessB) %>%
gather("indicator", "value", -generation) %>%
mutate(generation = as.factor(generation)) %>%
ggplot() +
geom_boxplot(aes(x = generation,
y = value,
color = indicator))
source('~/vw7.6ncnovo/cormas2020/Models/WitUses/analyses/RAnalyses.R', echo=TRUE)
source('~/vw7.6ncnovo/cormas2020/Models/WitUses/analyses/RAnalyses.R', echo=TRUE)
pop
# Natural selection (les solutions dominées meurent)
bestA <- max(pop$fitnessA)
bestB <- min(pop$fitnessB)
newPop <- pop %>%
mutate(alive = (fitnessA > bestA - 0.1) &
(fitnessB < bestB + 0.1)) %>%
filter(alive) %>%
select(- fitnessA, - fitnessB, -alive)
# reproduction
child <- data.frame(rTM = NA,
rTS  = NA,
rTP = NA)
newPop
?sample_n
# reproduction
child <- data.frame(rTM = NA,
rTS  = NA,
rTP = NA)
while(dim(newPop)[1] < popSize ) {
parents <- newPop %>% sample_n(2,replace = T)
child$rTM <- parents$rTM[1]
child$rTS <- parents$rTS[2]
child$rTP <- parents$rTP[sample(c(1,2),1)]
newPop <- newPop %>%
union(child)
}
newPop
parents <- newPop %>% sample_n(2,replace = T)
parents
child$rTM <- parents$rTM[1]
child$rTS <- parents$rTS[2]
child$rTP <- parents$rTP[sample(c(1,2),1)]
newPop <- newPop %>%
union(child)
newPop
newPop
child
newPop %>%
union(child)
?union
newPop <- newPop %>%
bind_rows(child)
newPop
?union
# reproduction
child <- data.frame(rTM = NA,
rTS  = NA,
rTP = NA)
while(dim(newPop)[1] < popSize ) {
parents <- newPop %>% sample_n(2,replace = T)
child$rTM <- parents$rTM[1]
child$rTS <- parents$rTS[2]
child$rTP <- parents$rTP[sample(c(1,2),1)]
newPop <- newPop %>%
bind_rows(child)
}
newPop
# Mutation
newPop <- newPop %>%
select(starts_with("rT")) %>%
rowwise() %>%
mutate_all(~rnorm(1,.,sd = 0.01)) %>%
mutate(rTM = max(rTM,0)) %>%
mutate(rTS = max(rTS,0)) %>%
mutate(rTP = max(rTP,0)) %>%
mutate(fitnessA = NA,
fitnessB = NA)
#Update Population
pop$generation <- generation
if (is.null(allPops)) {
allPops <- pop
} else {
allPops <- allPops %>%
union(pop)
}
pop <- newPop
#Plot Advances
allPops %>%
select(generation, fitnessA, fitnessB) %>%
gather("indicator", "value", -generation) %>%
mutate(generation = as.factor(generation)) %>%
ggplot() +
geom_boxplot(aes(x = generation,
y = value,
color = indicator))
pop
# reproduction
child <- data.frame(rTM = NA,
rTS  = NA,
rTP = NA)
while(dim(newPop)[1] < popSize ) {
parents <- newPop %>% sample_n(2,replace = T)
child$rTM <- parents$rTM[1]
child$rTS <- parents$rTS[2]
child$rTP <- parents$rTP[sample(c(1,2),1)]
newPop <- newPop %>%
bind_rows(child)
}
newPop
# Mutation
newPop <- newPop %>%
select(starts_with("rT")) %>%
rowwise() %>%
mutate_all(~rnorm(1,.,sd = 0.01)) %>%
mutate(rTM = max(rTM,0)) %>%
mutate(rTS = max(rTS,0)) %>%
mutate(rTP = max(rTP,0)) %>%
mutate(fitnessA = NA,
fitnessB = NA)
newPop
#Update Population
pop$generation <- generation
if (is.null(allPops)) {
allPops <- pop
} else {
allPops <- allPops %>%
union(pop)
}
pop <- newPop
source('~/vw7.6ncnovo/cormas2020/Models/WitUses/analyses/RAnalyses.R', echo=TRUE)
allPops %>%
select(generation, fitnessA, fitnessB) %>%
gather("indicator", "value", -generation) %>%
mutate(generation = as.factor(generation)) %>%
ggplot() +
geom_boxplot(aes(x = generation,
y = value,
color = indicator))
allPops
setwd("~/vw7.6ncnovo/cormas2020/Models/WitUses/analyses")
source('~/vw7.6ncnovo/cormas2020/Models/WitUses/analyses/RAnalyses.R', echo=TRUE)
source('~/vw7.6ncnovo/cormas2020/Models/WitUses/analyses/RAnalyses.R', echo=TRUE)
source('~/vw7.6ncnovo/cormas2020/Models/WitUses/analyses/RAnalyses.R', echo=TRUE)
i
replicate
generation
pop
